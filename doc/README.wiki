= Arrowhead Core 4.0-lw Docker Containers =

This container allows for quicker development without the need for connecting to an existing ''local cloud''. Currently, this container is at an alpha stage. Please submit any issues you find or enhancements you would like to see.

Version 4.0-lw is a lightweight implementation which contains all core services in a single Java JAR file. In turn, this container wraps everything necessary for running the Arrowhead 4.0 core services, including a pre-configured MySQL database. This is ideal for demonstrations, PoCs and projects with other tight requirements which might not allow several containers to be run.

== Usage ==

This version is meant to only require a single command.

<pre>docker run --rm -p 8440:8440 arrowheadf/core:4.0</pre>
To test the service, you can run the following command.

<pre>curl localhost:8440/serviceregistry</pre>
Which should respond with ''This is the Service Registry Arrowhead Core System''.

== Building from source ==

The easiest way to get the source code is to download the latest [https://forge.soa4d.org/anonscm/gitweb?p=arrowhead-f/users/docker.git;a=snapshot;h=refs/heads/4.0-lw;sf=tgz snapshot of the docker.git] repository and extract it.

In the Linux command line, you can use the following commands.

<pre>curl -k -o ahf-docker-4.0.tar.gz \
'https://forge.soa4d.org/anonscm/gitweb?p=arrowhead-f/users/docker.git;a=snapshot;h=refs/heads/4.0-lw;sf=tgz'
mkdir -p ahf-docker-4.0
tar -xvf ahf-docker-4.0.tar.gz -C ahf-docker-4.0 --strip-component=1
cd ahf-docker-4.0</pre>
Once you have the source code, you can make any necessary modifications and then build the image.

<pre>docker build -t arrowheadf/core:4.0 core/</pre>
If you are a developer for the containers, you might want to push any improvements you make.

<pre>docker push arrowheadf/core:4.0</pre>
== API documentation ==

Documentation for the API has been auto-generated and is provided in the <code>doc</code> directory.

You can find a [https://swagger.io/ Swagger] file called <code>arrowhead-core.json</code> which can be imported into SoapUI, Postman and other tools to generate client source code for different languages. For more information refer to <code>tools/generate-swagger/doc</code>.

A modified version of this file has been [https://app.swaggerhub.com/apis/arrowhead-f/arrowhead-4_0_core/4.0 published on SwaggerHub].

Apart from this file, you can find <code>api.html</code>, which contains a simple page listing all the available endpoints. For most of these, the auto-generator was capable of including body examples (payloads) where necessary.

== Other useful commands ==

<ul>
<li><p>To get the data from a volume called <code>tls</code>.</p>
<pre>sudo cp -far &quot;$(docker volume inspect tls | 
grep Mountpoint | 
sed -E 's/^\s*&quot;\w*&quot;\s*:\s*&quot;(.*)&quot;.*$/\1/g')/.&quot; . &amp;&amp; \
sudo chown -R $USER:$USER .</pre></li>
<li><p>Clean up Docker:</p>
<pre>docker system prune -a</pre></li>
<li><p>Completely clean up Docker (factory defaults / hard reset):</p>
<pre> sudo su -c &quot;service docker stop &amp;&amp;
 rm -r /var/lib/docker/* &amp;&amp;
 service docker start&quot;</pre></li></ul>

== Environment Variables ==

Any of the properties accepted by the Arrowhead Core 4.0 Lightweight application can be overridden by using an environment variable of the same name (but in uppercase and substituting dots by underscores).

For example, to set the property <code>ttl_interval</code>, we would use the environment variable <code>TTL_INTERVAL</code> as follows.

<pre>docker run -it --rm -p 8440:8440 -e TTL_INTERVAL=1000 --name ahf ahf:4.0</pre>
The available variables are as follows. For the purpose of each, contact the Arrowhead Core 4.0 developers.

* SERVER_ADDRESS
* GATEWAY_ADDRESS
* DB_USER
* DB_PASSWORD
* DB_ADDRESS
* CLOUD_KEYSTORE
* CLOUD_KEYSTORE_PASS
* CLOUD_KEYPASS
* AUTH_KEYSTORE
* AUTH_KEYSTOREPASS
* EVENT_PUBLISHING_DELAY
* REMOVE_OLD_FILTERS
* FILTER_CHECK_INTERVAL
* GATEWAY_SOCKET_TIMEOUT
* USE_GATEWAY
* MASTER_ARROWHEAD_CERT
* MIN_PORT
* MAX_PORT
* GATEWAY_KEYSTORE
* GATEWAY_KEYSTORE_PASS
* PING_SCHEDULED
* PING_TIMEOUT
* PING_INTERVAL
* TTL_SCHEDULED
* TTL_INTERVAL
* LOG4J_ROOTLOGGER
* LOG4J_APPENDER_DB
* LOG4J_APPENDER_DB_DRIVER
* LOG4J_APPENDER_DB_URL
* LOG4J_APPENDER_DB_USER
* LOG4J_APPENDER_DB_PASSWORD
* LOG4J_APPENDER_DB_SQL
* LOG4J_APPENDER_DB_LAYOUT
* LOG4J_LOGGER_ORG_HIBERNATE

